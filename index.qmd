---
title: "Simulation Challenge"
subtitle: "Generative Models and Monte Carlo Simulation"
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    number-sections: true
    code-fold: true
    code-tools: true
    css: |
      .cell-output {
        background-color: #f8f9fa;
        border-left: 4px solid #007bff;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
      }
      .cell-output pre {
        background-color: transparent;
        border: none;
        margin: 0;
        padding: 0;
      }
execute:
  echo: false
  eval: true
  warning: false
  message: false
---

# 🎲 Simulation Challenge - Monte Carlo Analysis

## Challenge Overview

**Your Mission:** Create a comprehensive Quarto document that simulates one or two investment strategies, analyzes the results, and demonstrates your ability to present counter-intuitive findings compellingly. Then render the document to HTML and deploy it via GitHub Pages from a new repository called "simulationChallenge."

## The Coin Flip Investment Game

Imagine you're offered an investment opportunity with these rules:

- **Start with:** $1,000
- **Each year:** A coin is flipped
  - **Heads (50% chance):** Your balance increases by 50%
  - **Tails (50% chance):** Your balance decreases by 40%
- **Duration:** 35 years (from age 20 to 55)
- **Outcome:** You receive the final balance at retirement

**The Question:** Is this a good investment? What would you expect to happen?

---

# Complete Simulation

*Running 10,000 Monte Carlo simulations to understand the true nature of this investment strategy...*

```{r}
#| label: complete-simulation

# Load required libraries
library(dplyr)
library(ggplot2)
library(purrr)
library(tibble)
library(scales)

# Set global options
knitr::opts_chunk$set(
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  fig.width = 10,
  fig.height = 6
)

# Game parameters
initial_balance <- 1000
heads_multiplier <- 1.5  # +50%
tails_multiplier <- 0.6  # -40%
years_to_retirement <- 35  # Assuming starting at age 20
num_simulations <- 10000

# Function to simulate a single game
simulate_game <- function(initial_balance, years, heads_mult, tails_mult) {
  balance <- initial_balance
  
  # Track the balance over time for this simulation
  balance_history <- numeric(years + 1)
  balance_history[1] <- balance
  
  for (year in 1:years) {
    # Flip coin (0 = tails, 1 = heads)
    coin_flip <- rbinom(1, 1, 0.5)
    
    if (coin_flip == 1) {
      # Heads: increase by 50%
      balance <- balance * heads_mult
    } else {
      # Tails: decrease by 40%
      balance <- balance * tails_mult
    }
    
    balance_history[year + 1] <- balance
  }
  
  return(list(
    final_balance = balance,
    balance_history = balance_history
  ))
}

# Run many simulations
set.seed(123)  # For reproducibility

# Run simulations
simulation_results <- map(1:num_simulations, function(i) {
  simulate_game(initial_balance, years_to_retirement, heads_multiplier, tails_multiplier)
})

# Extract final balances
final_balances <- map_dbl(simulation_results, ~ .x$final_balance)

# Create results dataframe
results_df <- tibble(
  simulation = 1:num_simulations,
  final_balance = final_balances,
  return_pct = (final_balances / initial_balance - 1) * 100
)

# Summary statistics
summary_stats <- results_df %>%
  summarise(
    mean_balance = mean(final_balance),
    median_balance = median(final_balance),
    min_balance = min(final_balance),
    max_balance = max(final_balance),
    mean_return = mean(return_pct),
    median_return = median(return_pct),
    prob_positive = mean(return_pct > 0),
    prob_break_even = mean(final_balance >= initial_balance)
  )

# Mathematical analysis
expected_annual_return <- 0.5 * 1.5 + 0.5 * 0.6  # 0.5 * 1.5 + 0.5 * 0.6 = 1.05
expected_total_return <- expected_annual_return^years_to_retirement
expected_final_balance <- initial_balance * expected_total_return

# Volatility analysis
volatility_stats <- results_df %>%
  summarise(
    std_dev = sd(return_pct),
    q25 = quantile(return_pct, 0.25),
    q75 = quantile(return_pct, 0.75),
    q90 = quantile(return_pct, 0.90),
    q95 = quantile(return_pct, 0.95),
    q99 = quantile(return_pct, 0.99)
  )

# Store results for display (suppress output)
invisible({
  game_params <- list(
    initial_balance = initial_balance,
    heads_multiplier = heads_multiplier,
    tails_multiplier = tails_multiplier,
    years_to_retirement = years_to_retirement,
    num_simulations = num_simulations
  )
  
  sim_results <- list(
    mean_balance = summary_stats$mean_balance,
    median_balance = summary_stats$median_balance,
    min_balance = summary_stats$min_balance,
    max_balance = summary_stats$max_balance,
    mean_return = summary_stats$mean_return,
    median_return = summary_stats$median_return,
    prob_positive = summary_stats$prob_positive,
    prob_break_even = summary_stats$prob_break_even
  )
  
  math_analysis <- list(
    expected_annual_return = expected_annual_return,
    expected_total_return = expected_total_return,
    expected_final_balance = expected_final_balance
  )
  
  volatility_analysis <- list(
    std_dev = volatility_stats$std_dev,
    q25 = volatility_stats$q25,
    q75 = volatility_stats$q75,
    q90 = volatility_stats$q90,
    q95 = volatility_stats$q95,
    q99 = volatility_stats$q99
  )
})
```

---

# 📊 Results & Analysis

## Simulation Summary

**Game Parameters:**
- Initial Balance: $1,000
- Heads: +50% (multiplier = 1.5)
- Tails: -40% (multiplier = 0.6)  
- Years to retirement: 35
- Number of simulations: 10,000

**Key Results:**
- **Mean final balance:** $`r format(round(sim_results$mean_balance, 2), big.mark = ",")`
- **Median final balance:** $`r format(round(sim_results$median_balance, 2), big.mark = ",")`
- **Min final balance:** $`r format(round(sim_results$min_balance, 2), big.mark = ",")`
- **Max final balance:** $`r format(round(sim_results$max_balance, 2), big.mark = ",")`
- **Mean return:** `r round(sim_results$mean_return, 1)`%
- **Median return:** `r round(sim_results$median_return, 1)`%
- **Probability of positive return:** `r round(sim_results$prob_positive * 100, 1)`%
- **Probability of breaking even or better:** `r round(sim_results$prob_break_even * 100, 1)`%

## Distribution of Outcomes

*The following visualizations reveal the true nature of this investment strategy...*

```{r}
#| label: visualizations

# Distribution of Final Balances
p1 <- ggplot(results_df, aes(x = final_balance)) +
  geom_histogram(bins = 50, fill = "steelblue", alpha = 0.7, color = "black") +
  geom_vline(xintercept = initial_balance, color = "red", linetype = "dashed", size = 1) +
  geom_vline(xintercept = summary_stats$mean_balance, color = "green", linetype = "dashed", size = 1) +
  geom_vline(xintercept = summary_stats$median_balance, color = "orange", linetype = "dashed", size = 1) +
  scale_x_continuous(labels = dollar_format(), trans = "log10") +
  labs(
    title = "Distribution of Final Balances (Log Scale)",
    subtitle = "Red line = Initial $1,000 | Green line = Mean | Orange line = Median",
    x = "Final Balance ($)",
    y = "Frequency"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12)
  )

# Distribution of Returns
p2 <- ggplot(results_df, aes(x = return_pct)) +
  geom_histogram(bins = 50, fill = "darkgreen", alpha = 0.7, color = "black") +
  geom_vline(xintercept = 0, color = "red", linetype = "dashed", size = 1) +
  geom_vline(xintercept = summary_stats$mean_return, color = "blue", linetype = "dashed", size = 1) +
  geom_vline(xintercept = summary_stats$median_return, color = "orange", linetype = "dashed", size = 1) +
  labs(
    title = "Distribution of Percentage Returns",
    subtitle = "Red line = Break-even (0%) | Blue line = Mean | Orange line = Median",
    x = "Return (%)",
    y = "Frequency"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12)
  )

# Sample Paths Over Time
sample_indices <- sample(1:num_simulations, 100)
sample_histories <- map(sample_indices, ~ simulation_results[[.x]]$balance_history)

years <- 0:years_to_retirement
path_data <- map_dfr(1:length(sample_histories), function(i) {
  tibble(
    simulation = i,
    year = years,
    balance = sample_histories[[i]]
  )
})

p3 <- ggplot(path_data, aes(x = year, y = balance, group = simulation)) +
  geom_line(alpha = 0.3, color = "steelblue") +
  scale_y_continuous(labels = dollar_format(), trans = "log10") +
  labs(
    title = "Sample of 100 Simulation Paths",
    subtitle = "Each line represents one possible outcome over 35 years",
    x = "Year",
    y = "Account Balance ($, Log Scale)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12)
  )

# Display plots
print(p1)
print(p2)
print(p3)
```

---

# 🧮 Mathematical Analysis

## 1. Expected Value After One Coin Flip

*Let's start by understanding what should happen mathematically...*

```{r}
#| label: expected-value-analysis

# Calculate expected value after 1 coin flip
prob_heads <- 0.5
prob_tails <- 0.5
heads_outcome <- initial_balance * heads_multiplier  # $1,000 * 1.5 = $1,500
tails_outcome <- initial_balance * tails_multiplier  # $1,000 * 0.6 = $600

expected_value_1_flip <- prob_heads * heads_outcome + prob_tails * tails_outcome

# Store for display
invisible({
  ev_analysis <- list(
    initial_balance = initial_balance,
    heads_outcome = heads_outcome,
    tails_outcome = tails_outcome,
    expected_value_1_flip = expected_value_1_flip,
    expected_return_pct = (expected_value_1_flip / initial_balance - 1) * 100
  )
})
```

**Expected Value Calculation:**

- **Initial balance:** $`r format(ev_analysis$initial_balance, big.mark = ",")`
- **Heads outcome (50% chance):** $`r format(ev_analysis$heads_outcome, big.mark = ",")`
- **Tails outcome (50% chance):** $`r format(ev_analysis$tails_outcome, big.mark = ",")`
- **Expected value = 0.5 × $`r format(ev_analysis$heads_outcome, big.mark = ",")` + 0.5 × $`r format(ev_analysis$tails_outcome, big.mark = ",")`**
- **Expected value = $`r format(ev_analysis$expected_value_1_flip, big.mark = ",")`**
- **Expected return = `r round(ev_analysis$expected_return_pct, 1)`%**

## 2. Expectation vs. Reality

*The mathematical expectation tells one story, but reality tells another...*

```{r}
#| label: expectation-vs-reality

# Calculate difference
difference <- expected_value_1_flip - initial_balance
is_positive <- expected_value_1_flip > initial_balance

# Store for display
invisible({
  expectation_analysis <- list(
    expected_value_1_flip = expected_value_1_flip,
    initial_balance = initial_balance,
    difference = difference,
    is_positive = is_positive,
    expected_return_pct = (expected_value_1_flip / initial_balance - 1) * 100
  )
})
```

**Expectation vs. Reality:**

- **Expected value after 1 flip:** $`r format(expectation_analysis$expected_value_1_flip, big.mark = ",")`
- **Initial investment:** $`r format(expectation_analysis$initial_balance, big.mark = ",")`
- **Difference:** $`r format(expectation_analysis$difference, big.mark = ",")`

`r if(expectation_analysis$is_positive) {"✅ **POSITIVE EXPECTED VALUE:** The expected value is HIGHER than the initial investment."} else {"❌ **NEGATIVE EXPECTED VALUE:** The expected value is LOWER than the initial investment."}`

This means the game has a `r if(expectation_analysis$is_positive) {"positive"} else {"negative"}` expected return of `r round(expectation_analysis$expected_return_pct, 1)`% per flip.

Based on this, you would expect your account to be worth `r if(expectation_analysis$is_positive) {"MORE"} else {"LESS"}` than $1,000.

**However, this is just the mathematical expectation. The reality is more complex:**
- You have a 50% chance of gaining $500 (ending with $1,500)
- You have a 50% chance of losing $400 (ending with $600)  
- The expected value is positive, but most individual outcomes will be losses!

## 3. Single Simulation Over Time

*Let's follow one person's journey through this investment strategy...*

```{r}
#| label: single-simulation

# Run a single simulation and track balance over time
single_sim <- simulate_game(initial_balance, years_to_retirement, heads_multiplier, tails_multiplier)

# Create data for plotting
years <- 0:years_to_retirement
single_sim_data <- tibble(
  year = years,
  age = 20 + years,  # Starting at age 20
  balance = single_sim$balance_history,
  return_pct = (balance / initial_balance - 1) * 100
)

# Create the plot
p_single <- ggplot(single_sim_data, aes(x = age, y = balance)) +
  geom_line(color = "steelblue", size = 1.2) +
  geom_point(color = "darkblue", size = 1) +
  geom_hline(yintercept = initial_balance, color = "red", linetype = "dashed", size = 1) +
  scale_y_continuous(labels = dollar_format(), trans = "log10") +
  labs(
    title = "Single Simulation: Account Balance Over Time",
    subtitle = paste("Final balance: $", format(round(single_sim$final_balance, 2), big.mark = ","), 
                     " (", round((single_sim$final_balance / initial_balance - 1) * 100, 1), "% return)"),
    x = "Age",
    y = "Account Balance ($, Log Scale)",
    caption = "Red dashed line = Initial $1,000 investment"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 14, color = "darkblue"),
    plot.caption = element_text(size = 10, color = "gray"),
    axis.title = element_text(size = 12),
    axis.text = element_text(size = 10)
  )

print(p_single)

# Analysis of this single simulation
estimated_heads <- (log(single_sim$final_balance / initial_balance) - years_to_retirement * log(0.6)) / (log(1.5) - log(0.6))
estimated_tails <- years_to_retirement - estimated_heads
total_return_pct <- (single_sim$final_balance / initial_balance - 1) * 100
annualized_return <- (single_sim$final_balance / initial_balance)^(1/years_to_retirement) - 1
is_profitable <- single_sim$final_balance > initial_balance

# Store for display
invisible({
  single_sim_analysis <- list(
    starting_age = 20,
    retirement_age = 55,
    initial_balance = initial_balance,
    final_balance = single_sim$final_balance,
    total_return_pct = total_return_pct,
    annualized_return = annualized_return,
    estimated_heads = estimated_heads,
    estimated_tails = estimated_tails,
    is_profitable = is_profitable
  )
})
```

**Single Simulation Analysis:**

- **Starting age:** `r single_sim_analysis$starting_age`
- **Retirement age:** `r single_sim_analysis$retirement_age`
- **Initial balance:** $`r format(single_sim_analysis$initial_balance, big.mark = ",")`
- **Final balance:** $`r format(round(single_sim_analysis$final_balance, 2), big.mark = ",")`
- **Total return:** `r round(single_sim_analysis$total_return_pct, 1)`%
- **Annualized return:** `r round(single_sim_analysis$annualized_return * 100, 3)`%
- **Estimated heads:** `r round(single_sim_analysis$estimated_heads, 1)` out of `r years_to_retirement` flips
- **Estimated tails:** `r round(single_sim_analysis$estimated_tails, 1)` out of `r years_to_retirement` flips

**Commentary:**

`r if(single_sim_analysis$is_profitable) {"🎉 **SUCCESS!** This simulation resulted in a **PROFIT**."} else {"😞 **LOSS!** This simulation resulted in a **LOSS**."}`

The account `r if(single_sim_analysis$is_profitable) {"grew"} else {"shrank"}` from $1,000 to $`r format(round(single_sim_analysis$final_balance, 2), big.mark = ",")`.

This represents a `r round(single_sim_analysis$total_return_pct, 1)`% `r if(single_sim_analysis$is_profitable) {"gain"} else {"loss"}` over 35 years.

This single simulation shows the high volatility of the game. While the expected value is positive, individual outcomes can vary dramatically. The log scale on the y-axis helps visualize the extreme range of possible outcomes.

## 4. Multiple Simulations: Probability Distribution

*Let's run 100 simulations to see the distribution of outcomes at age 55...*

```{r}
#| label: multiple-simulations

# Run 100 simulations
set.seed(456)  # Different seed for variety
num_small_simulations <- 100

# Run 100 simulations
small_simulation_results <- map(1:num_small_simulations, function(i) {
  simulate_game(initial_balance, years_to_retirement, heads_multiplier, tails_multiplier)
})

# Extract final balances
small_final_balances <- map_dbl(small_simulation_results, ~ .x$final_balance)

# Create results dataframe
small_results_df <- tibble(
  simulation = 1:num_small_simulations,
  final_balance = small_final_balances,
  return_pct = (small_final_balances / initial_balance - 1) * 100
)

# Calculate summary statistics for 100 simulations
small_summary_stats <- small_results_df %>%
  summarise(
    mean_balance = mean(final_balance),
    median_balance = median(final_balance),
    min_balance = min(final_balance),
    max_balance = max(final_balance),
    std_dev = sd(final_balance),
    prob_positive = mean(return_pct > 0),
    prob_break_even = mean(final_balance >= initial_balance)
  )

# Create probability distribution plot
p_distribution <- ggplot(small_results_df, aes(x = final_balance)) +
  geom_histogram(bins = 20, fill = "steelblue", alpha = 0.7, color = "black", 
                 aes(y = after_stat(density))) +
  geom_density(color = "red", size = 1.2, alpha = 0.8) +
  geom_vline(xintercept = initial_balance, color = "red", linetype = "dashed", size = 1) +
  geom_vline(xintercept = small_summary_stats$mean_balance, color = "green", linetype = "dashed", size = 1) +
  geom_vline(xintercept = small_summary_stats$median_balance, color = "orange", linetype = "dashed", size = 1) +
  scale_x_continuous(labels = dollar_format(), trans = "log10") +
  labs(
    title = "Probability Distribution of Final Balances (100 Simulations)",
    subtitle = paste("Mean: $", format(round(small_summary_stats$mean_balance, 2), big.mark = ","),
                     " | Median: $", format(round(small_summary_stats$median_balance, 2), big.mark = ","),
                     " | Std Dev: $", format(round(small_summary_stats$std_dev, 2), big.mark = ",")),
    x = "Final Balance at Age 55 ($, Log Scale)",
    y = "Probability Density",
    caption = "Red line = Initial $1,000 | Green line = Mean | Orange line = Median"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 12, color = "darkblue"),
    plot.caption = element_text(size = 10, color = "gray"),
    axis.title = element_text(size = 12),
    axis.text = element_text(size = 10)
  )

print(p_distribution)

# Store results for display
invisible({
  small_sim_analysis <- list(
    num_simulations = num_small_simulations,
    mean_balance = small_summary_stats$mean_balance,
    median_balance = small_summary_stats$median_balance,
    min_balance = small_summary_stats$min_balance,
    max_balance = small_summary_stats$max_balance,
    std_dev = small_summary_stats$std_dev,
    prob_positive = small_summary_stats$prob_positive,
    prob_break_even = small_summary_stats$prob_break_even
  )
})
```

**100 Simulations Analysis:**

- **Number of simulations:** `r small_sim_analysis$num_simulations`
- **Mean final balance:** $`r format(round(small_sim_analysis$mean_balance, 2), big.mark = ",")`
- **Median final balance:** $`r format(round(small_sim_analysis$median_balance, 2), big.mark = ",")`
- **Minimum final balance:** $`r format(round(small_sim_analysis$min_balance, 2), big.mark = ",")`
- **Maximum final balance:** $`r format(round(small_sim_analysis$max_balance, 2), big.mark = ",")`
- **Standard deviation:** $`r format(round(small_sim_analysis$std_dev, 2), big.mark = ",")`
- **Probability of positive return:** `r round(small_sim_analysis$prob_positive * 100, 1)`%
- **Probability of breaking even or better:** `r round(small_sim_analysis$prob_break_even * 100, 1)`%

**Key Observations:**

The probability distribution reveals the **extreme volatility** of this investment strategy:

- **Wide range:** From $`r format(round(small_sim_analysis$min_balance, 2), big.mark = ",")` to $`r format(round(small_sim_analysis$max_balance, 2), big.mark = ",")`
- **High standard deviation:** $`r format(round(small_sim_analysis$std_dev, 2), big.mark = ",")` indicates massive variability
- **Skewed distribution:** The mean ($`r format(round(small_sim_analysis$mean_balance, 2), big.mark = ",")`) is much higher than the median ($`r format(round(small_sim_analysis$median_balance, 2), big.mark = ",")`)
- **Most outcomes are losses:** Only `r round(small_sim_analysis$prob_positive * 100, 1)`% of simulations resulted in positive returns

This distribution clearly shows why this strategy, despite having a positive expected value, is extremely risky for individual investors.

---
