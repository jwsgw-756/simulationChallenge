---
title: "Simulation Challenge"
subtitle: "Generative Models and Monte Carlo Simulation"
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    number-sections: true
    code-fold: true
    code-tools: true
    css: |
      .cell-output {
        background-color: #f8f9fa;
        border-left: 4px solid #007bff;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
      }
      .cell-output pre {
        background-color: transparent;
        border: none;
        margin: 0;
        padding: 0;
      }
execute:
  echo: false
  eval: true
  warning: false
  message: false
---

# 🎲 Simulation Challenge - Monte Carlo Analysis

## Challenge Overview

**Your Mission:** Create a comprehensive Quarto document that simulates one or two investment strategies, analyzes the results, and demonstrates your ability to present counter-intuitive findings compellingly. Then render the document to HTML and deploy it via GitHub Pages from a new repository called "simulationChallenge."

## The Coin Flip Investment Game

Imagine you're offered an investment opportunity with these rules:

- **Start with:** $1,000
- **Each year:** A coin is flipped
  - **Heads (50% chance):** Your balance increases by 50%
  - **Tails (50% chance):** Your balance decreases by 40%
- **Duration:** 35 years (from age 20 to 55)
- **Outcome:** You receive the final balance at retirement

**The Question:** Is this a good investment? What would you expect to happen?

---

# Complete Simulation

*Running 10,000 Monte Carlo simulations to understand the true nature of this investment strategy...*

```{r}
#| label: complete-simulation

# Load required libraries
library(dplyr)
library(ggplot2)
library(purrr)
library(tibble)
library(scales)

# Set global options
knitr::opts_chunk$set(
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  fig.width = 10,
  fig.height = 6
)

# Game parameters
initial_balance <- 1000
heads_multiplier <- 1.5  # +50%
tails_multiplier <- 0.6  # -40%
years_to_retirement <- 35  # Assuming starting at age 20
num_simulations <- 10000

# Function to simulate a single game
simulate_game <- function(initial_balance, years, heads_mult, tails_mult) {
  balance <- initial_balance
  
  # Track the balance over time for this simulation
  balance_history <- numeric(years + 1)
  balance_history[1] <- balance
  
  for (year in 1:years) {
    # Flip coin (0 = tails, 1 = heads)
    coin_flip <- rbinom(1, 1, 0.5)
    
    if (coin_flip == 1) {
      # Heads: increase by 50%
      balance <- balance * heads_mult
    } else {
      # Tails: decrease by 40%
      balance <- balance * tails_mult
    }
    
    balance_history[year + 1] <- balance
  }
  
  return(list(
    final_balance = balance,
    balance_history = balance_history
  ))
}

# Run many simulations
set.seed(123)  # For reproducibility

# Run simulations
simulation_results <- map(1:num_simulations, function(i) {
  simulate_game(initial_balance, years_to_retirement, heads_multiplier, tails_multiplier)
})

# Extract final balances
final_balances <- map_dbl(simulation_results, ~ .x$final_balance)

# Create results dataframe
results_df <- tibble(
  simulation = 1:num_simulations,
  final_balance = final_balances,
  return_pct = (final_balances / initial_balance - 1) * 100
)

# Summary statistics
summary_stats <- results_df %>%
  summarise(
    mean_balance = mean(final_balance),
    median_balance = median(final_balance),
    min_balance = min(final_balance),
    max_balance = max(final_balance),
    mean_return = mean(return_pct),
    median_return = median(return_pct),
    prob_positive = mean(return_pct > 0),
    prob_break_even = mean(final_balance >= initial_balance)
  )

# Mathematical analysis
expected_annual_return <- 0.5 * 1.5 + 0.5 * 0.6  # 0.5 * 1.5 + 0.5 * 0.6 = 1.05
expected_total_return <- expected_annual_return^years_to_retirement
expected_final_balance <- initial_balance * expected_total_return

# Volatility analysis
volatility_stats <- results_df %>%
  summarise(
    std_dev = sd(return_pct),
    q25 = quantile(return_pct, 0.25),
    q75 = quantile(return_pct, 0.75),
    q90 = quantile(return_pct, 0.90),
    q95 = quantile(return_pct, 0.95),
    q99 = quantile(return_pct, 0.99)
  )

# Print results
cat("=== GAME PARAMETERS ===")
cat("\nInitial Balance: $", format(initial_balance, big.mark = ","))
cat("\nHeads: +50% (multiplier =", heads_multiplier, ")")
cat("\nTails: -40% (multiplier =", tails_multiplier, ")")
cat("\nYears to retirement:", years_to_retirement)
cat("\nNumber of simulations:", format(num_simulations, big.mark = ","))

cat("\n\n=== SIMULATION RESULTS ===")
cat("\nMean final balance: $", format(round(summary_stats$mean_balance, 2), big.mark = ","))
cat("\nMedian final balance: $", format(round(summary_stats$median_balance, 2), big.mark = ","))
cat("\nMin final balance: $", format(round(summary_stats$min_balance, 2), big.mark = ","))
cat("\nMax final balance: $", format(round(summary_stats$max_balance, 2), big.mark = ","))
cat("\nMean return: ", round(summary_stats$mean_return, 1), "%")
cat("\nMedian return: ", round(summary_stats$median_return, 1), "%")
cat("\nProbability of positive return: ", round(summary_stats$prob_positive * 100, 1), "%")
cat("\nProbability of breaking even or better: ", round(summary_stats$prob_break_even * 100, 1), "%")

cat("\n\n=== MATHEMATICAL ANALYSIS ===")
cat("\nExpected annual multiplier:", round(expected_annual_return, 4))
cat("\nExpected total multiplier over", years_to_retirement, "years:", round(expected_total_return, 2))
cat("\nExpected final balance: $", format(round(expected_final_balance, 2), big.mark = ","))
cat("\nExpected return: ", round((expected_final_balance / initial_balance - 1) * 100, 1), "%")

cat("\n\n=== VOLATILITY ANALYSIS ===")
cat("\nStandard deviation of returns:", round(volatility_stats$std_dev, 1), "%")
cat("\n25th percentile:", round(volatility_stats$q25, 1), "%")
cat("\n75th percentile:", round(volatility_stats$q75, 1), "%")
cat("\n90th percentile:", round(volatility_stats$q90, 1), "%")
cat("\n95th percentile:", round(volatility_stats$q95, 1), "%")
cat("\n99th percentile:", round(volatility_stats$q99, 1), "%")
```

---

# 📊 Results & Analysis

## Distribution of Outcomes

*The following visualizations reveal the true nature of this investment strategy...*

```{r}
#| label: visualizations

# Distribution of Final Balances
p1 <- ggplot(results_df, aes(x = final_balance)) +
  geom_histogram(bins = 50, fill = "steelblue", alpha = 0.7, color = "black") +
  geom_vline(xintercept = initial_balance, color = "red", linetype = "dashed", size = 1) +
  geom_vline(xintercept = summary_stats$mean_balance, color = "green", linetype = "dashed", size = 1) +
  geom_vline(xintercept = summary_stats$median_balance, color = "orange", linetype = "dashed", size = 1) +
  scale_x_continuous(labels = dollar_format(), trans = "log10") +
  labs(
    title = "Distribution of Final Balances (Log Scale)",
    subtitle = "Red line = Initial $1,000 | Green line = Mean | Orange line = Median",
    x = "Final Balance ($)",
    y = "Frequency"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12)
  )

# Distribution of Returns
p2 <- ggplot(results_df, aes(x = return_pct)) +
  geom_histogram(bins = 50, fill = "darkgreen", alpha = 0.7, color = "black") +
  geom_vline(xintercept = 0, color = "red", linetype = "dashed", size = 1) +
  geom_vline(xintercept = summary_stats$mean_return, color = "blue", linetype = "dashed", size = 1) +
  geom_vline(xintercept = summary_stats$median_return, color = "orange", linetype = "dashed", size = 1) +
  labs(
    title = "Distribution of Percentage Returns",
    subtitle = "Red line = Break-even (0%) | Blue line = Mean | Orange line = Median",
    x = "Return (%)",
    y = "Frequency"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12)
  )

# Sample Paths Over Time
sample_indices <- sample(1:num_simulations, 100)
sample_histories <- map(sample_indices, ~ simulation_results[[.x]]$balance_history)

years <- 0:years_to_retirement
path_data <- map_dfr(1:length(sample_histories), function(i) {
  tibble(
    simulation = i,
    year = years,
    balance = sample_histories[[i]]
  )
})

p3 <- ggplot(path_data, aes(x = year, y = balance, group = simulation)) +
  geom_line(alpha = 0.3, color = "steelblue") +
  scale_y_continuous(labels = dollar_format(), trans = "log10") +
  labs(
    title = "Sample of 100 Simulation Paths",
    subtitle = "Each line represents one possible outcome over 35 years",
    x = "Year",
    y = "Account Balance ($, Log Scale)"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 12)
  )

# Display plots
print(p1)
print(p2)
print(p3)
```

---

# 🧮 Mathematical Analysis

## 1. Expected Value After One Coin Flip

*Let's start by understanding what should happen mathematically...*

```{r}
#| label: expected-value-analysis

# Calculate expected value after 1 coin flip
prob_heads <- 0.5
prob_tails <- 0.5
heads_outcome <- initial_balance * heads_multiplier  # $1,000 * 1.5 = $1,500
tails_outcome <- initial_balance * tails_multiplier  # $1,000 * 0.6 = $600

expected_value_1_flip <- prob_heads * heads_outcome + prob_tails * tails_outcome

cat("=== EXPECTED VALUE AFTER 1 COIN FLIP ===")
cat("\nInitial balance: $", format(initial_balance, big.mark = ","))
cat("\nHeads outcome (50% chance): $", format(heads_outcome, big.mark = ","))
cat("\nTails outcome (50% chance): $", format(tails_outcome, big.mark = ","))
cat("\nExpected value = 0.5 × $", format(heads_outcome, big.mark = ","), " + 0.5 × $", format(tails_outcome, big.mark = ","))
cat("\nExpected value = $", format(expected_value_1_flip, big.mark = ","))
cat("\nExpected return = ", round((expected_value_1_flip / initial_balance - 1) * 100, 1), "%")
```

## 2. Expectation vs. Reality

*The mathematical expectation tells one story, but reality tells another...*

```{r}
#| label: expectation-vs-reality

cat("\n=== EXPECTATION VS. REALITY ===")
cat("\nExpected value after 1 flip: $", format(expected_value_1_flip, big.mark = ","))
cat("\nInitial investment: $", format(initial_balance, big.mark = ","))
cat("\nDifference: $", format(expected_value_1_flip - initial_balance, big.mark = ","))

if (expected_value_1_flip > initial_balance) {
  cat("\n\n✅ POSITIVE EXPECTED VALUE: The expected value is HIGHER than the initial investment.")
  cat("\n   This means the game has a positive expected return of ", round((expected_value_1_flip / initial_balance - 1) * 100, 1), "% per flip.")
  cat("\n   Based on this, you would expect your account to be worth MORE than $1,000.")
} else {
  cat("\n\n❌ NEGATIVE EXPECTED VALUE: The expected value is LOWER than the initial investment.")
  cat("\n   This means the game has a negative expected return.")
  cat("\n   Based on this, you would expect your account to be worth LESS than $1,000.")
}

cat("\n\nHowever, this is just the mathematical expectation. The reality is more complex:")
cat("\n- You have a 50% chance of gaining $500 (ending with $1,500)")
cat("\n- You have a 50% chance of losing $400 (ending with $600)")
cat("\n- The expected value is positive, but most individual outcomes will be losses!")
```

## 3. Single Simulation Over Time

*Let's follow one person's journey through this investment strategy...*

```{r}
#| label: single-simulation

# Run a single simulation and track balance over time
single_sim <- simulate_game(initial_balance, years_to_retirement, heads_multiplier, tails_multiplier)

# Create data for plotting
years <- 0:years_to_retirement
single_sim_data <- tibble(
  year = years,
  age = 20 + years,  # Starting at age 20
  balance = single_sim$balance_history,
  return_pct = (balance / initial_balance - 1) * 100
)

# Create the plot
p_single <- ggplot(single_sim_data, aes(x = age, y = balance)) +
  geom_line(color = "steelblue", size = 1.2) +
  geom_point(color = "darkblue", size = 1) +
  geom_hline(yintercept = initial_balance, color = "red", linetype = "dashed", size = 1) +
  scale_y_continuous(labels = dollar_format(), trans = "log10") +
  labs(
    title = "Single Simulation: Account Balance Over Time",
    subtitle = paste("Final balance: $", format(round(single_sim$final_balance, 2), big.mark = ","), 
                     " (", round((single_sim$final_balance / initial_balance - 1) * 100, 1), "% return)"),
    x = "Age",
    y = "Account Balance ($, Log Scale)",
    caption = "Red dashed line = Initial $1,000 investment"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold"),
    plot.subtitle = element_text(size = 14, color = "darkblue"),
    plot.caption = element_text(size = 10, color = "gray"),
    axis.title = element_text(size = 12),
    axis.text = element_text(size = 10)
  )

print(p_single)

# Analysis of this single simulation
cat("\n=== SINGLE SIMULATION ANALYSIS ===")
cat("\nStarting age: 20")
cat("\nRetirement age: 55")
cat("\nInitial balance: $", format(initial_balance, big.mark = ","))
cat("\nFinal balance: $", format(round(single_sim$final_balance, 2), big.mark = ","))
cat("\nTotal return: ", round((single_sim$final_balance / initial_balance - 1) * 100, 1), "%")
cat("\nAnnualized return: ", round((single_sim$final_balance / initial_balance)^(1/years_to_retirement) - 1, 3) * 100, "%")

# Count heads and tails in this simulation
# We can estimate this from the final balance
estimated_heads <- (log(single_sim$final_balance / initial_balance) - years_to_retirement * log(0.6)) / (log(1.5) - log(0.6))
estimated_tails <- years_to_retirement - estimated_heads

cat("\nEstimated heads: ", round(estimated_heads, 1), " out of ", years_to_retirement, " flips")
cat("\nEstimated tails: ", round(estimated_tails, 1), " out of ", years_to_retirement, " flips")

# Comment on results
cat("\n\n=== COMMENTARY ===")
if (single_sim$final_balance > initial_balance) {
  cat("\n🎉 SUCCESS! This simulation resulted in a PROFIT.")
  cat("\n   The account grew from $1,000 to $", format(round(single_sim$final_balance, 2), big.mark = ","), ".")
  cat("\n   This represents a ", round((single_sim$final_balance / initial_balance - 1) * 100, 1), "% gain over 35 years.")
} else {
  cat("\n😞 LOSS! This simulation resulted in a LOSS.")
  cat("\n   The account shrank from $1,000 to $", format(round(single_sim$final_balance, 2), big.mark = ","), ".")
  cat("\n   This represents a ", round((single_sim$final_balance / initial_balance - 1) * 100, 1), "% loss over 35 years.")
}

cat("\n\nThis single simulation shows the high volatility of the game.")
cat("\nWhile the expected value is positive, individual outcomes can vary dramatically.")
cat("\nThe log scale on the y-axis helps visualize the extreme range of possible outcomes.")
```

---

# 🎯 Key Insights & Conclusions

## The Counter-Intuitive Truth

This simulation reveals a fascinating paradox in investment strategy:

### ✅ **Mathematically Favorable**
- **Expected return:** +5% per year
- **35-year expectation:** ~$5,516 (451% gain)
- **The math says:** This is a profitable strategy

### ❌ **Reality for Most People**
- **Median outcome:** Likely a loss
- **Most participants:** Will lose money
- **Volatility:** Extreme swings make it unsuitable for most investors

## The Investment Lesson

This coin-flip game demonstrates a fundamental principle of finance: **high expected returns don't guarantee good outcomes for most participants**. The combination of volatility and compounding creates a scenario where:

- The mathematical expectation is profitable
- Most people will lose money  
- A few people will become extremely wealthy
- The median outcome is likely negative

## Real-World Parallels

This simulation mirrors many real investment strategies:
- **Cryptocurrency investing:** High volatility with potential for massive gains or losses
- **Penny stocks:** Similar asymmetric risk-return profiles  
- **Leveraged ETFs:** Designed to amplify daily returns but can suffer from volatility drag
- **Startup investing:** Most startups fail, but a few create enormous returns

## Final Recommendation

While the expected value is positive, this strategy is essentially a **high-stakes lottery** where:
- A few winners take home life-changing amounts
- Most participants lose their initial investment
- The risk-reward profile is unsuitable for most investors

**Bottom line:** Understanding the difference between expected value and typical outcomes is crucial in real-world investing. Diversification and risk management matter more than mathematical expectations alone.

---

*This analysis demonstrates the power of Monte Carlo simulation in revealing counter-intuitive insights about investment strategies that appear profitable on paper but may be devastating in practice.*
